

/*-------- utils --------*/
type vector = [number, number]
type genotype = Array<number>

function addv(v : vector, u : vector) : vector {
	return [ v[0] + u[0], v[1] + u[1] ]
}

function randint(a : number, b : number) {
	const n = b - a + 1
	return ~~(Math.random() * n) + a
}

function bounds(val : number, low : number, high : number) {
	const
	ltest = Number(val < low),
	htest = Number(val > high),
	vtest = Number(ltest + htest == 0)

	return ltest * low + htest * high + vtest * val
}

const cos = (x : number) => Math.cos((x + 90) * Math.PI/180),
	  sin = (x : number) => Math.sin((x + 90) * Math.PI/180)



/*-------- engine --------*/
type state = [
	// X, Y
	number, number,
	// HS, VS
	number, number,
	// fuel, angle, thrust
	number, number, number
]

// constants and access codes
const DEFAULT_STATE : state = [0,0,0,0,0,0,0],
	  gravity_acceleration = -3.711,
	  pos = 0, speed = 2,
	  fuel = 4, angle = 5, thrust = 6

function set(state : state, field : number, val : vector | number) {
	if (typeof val == "number") {state[field] = val}
	else if (field < 2) { state[0] = val[0]; state[1] = val[1] }
	else { state[2] = val[0]; state[3] = val[1] }
}

function get(state : state, field : number) : vector | number {
	if (field < 2) { return [state[0], state[1]] }
	else if (field < 4) { return [state[2], state[3]] }
	else { return state[field] }
}

function update(state : state, set_angle : number, set_thrust : number) {
	const ang = get(state, angle) as number,
		  thrst = get(state, thrust) as number,
		  fl = get(state, fuel) as number,
		  spd = get(state, speed) as vector,
		  position = get(state, pos) as vector

	if (fl <= 0) set_thrust = -4
	
	const new_ang = bounds(ang + set_angle, -90, 90),
		  new_thrst = bounds(thrst + set_thrust, 0, 4),
		  new_spd = addv(spd, [cos(new_ang) * new_thrst, sin(new_ang) * new_thrst + gravity_acceleration])
	
	set(state, fuel, fl - new_thrst)
	set(state, angle, new_ang)
	set(state, thrust, new_thrst)
	set(state, speed, new_spd)
	set(state, pos, addv(position, [new_spd[0], new_spd[1]]))
}


function collision(a : number, b : number, A : number, B :number, x : number, y :number) {
	const bounded = (x1 : number, p :number , x2 : number) => (x1 <= p && p <= x2) || (x1 >= p && p >= x2)
	return (x - a)*(B - b) - (y - b)*(A - a) >= 0 && bounded(a, x, A)
}



class Engine {

	surfaceX : Array<number>
	surfaceY : Array<number>
	surface  : Array<number>
	spot  	 : Array<number>
	origin   : state	 

	constructor(surfaceN : Array<number>, spot : [number, number], origin : state = DEFAULT_STATE) {
		this.surface = surfaceN
		this.origin = origin
		this.spot = spot
		this.surfaceX = []; this.surfaceY = []
		for (let i = 0; i < surfaceN.length; i++)
			if (i % 2)
				this.surfaceY.push(surfaceN[i])
			else
				this.surfaceX.push(surfaceN[i])
	}

	make_state() : state { return [...this.origin] }

	succesful(state : state) {
		const x = (get(state, pos) as vector)[0]

		return Math.abs(get(state, speed)[0]) <= 20
		&& Math.abs(get(state, speed)[1]) <= 40
		&& Math.abs(get(state, angle) as number) == 0
		&& this.spot[0] - 500 <= x
		&& this.spot[0] + 500 >= x
	}

	terminal(state : state) {
		const X = this.surfaceX, Y = this.surfaceY, n = X.length,
			  [x, y] = get(state, pos) as vector

		for (let i = 1; i < n; i++) {
			const a = X[i-1], b = Y[i-1], // first point
				  A = X[i],   B = Y[i]	  // second point
			// run geometry test (który nie działa dla pionwych prostych btw)
			if (collision(a, b, A, B, x, y)) return true
		}
		return false
	}

	update_state(state : state, angle : number, thrust : number) {
		if (this.terminal(state)) return false
		update(state, angle, thrust)
		return true
	}


	*simulator(genotype : genotype) {
		console.assert(genotype.length % 2 == 0, "corrupted genotype " + genotype.length)
		const state = this.make_state()

		for (let i = 0; i < genotype.length; i+=2)
			if (this.update_state(state, genotype[i], genotype[i+1])) yield state
			else break
		yield state
	}

	trajectory(genotype : genotype) : [Array<number>, state] {
		const res = [ ...get(this.origin, pos) as vector ]; 
		let state : state
		for (let s of this.simulator(genotype)) {
			state = s
			res.push( ...get(s, pos) as vector )
		}

		return [res, state]
	}
}



// Genetics
type agent = [genotype, number]
type population = Array<agent>

function make_agent(genotype : genotype, evalf : Function) : agent { return [genotype, evalf(genotype)] }


function bounded_MSE(state : state, spot : [number, number], angle_coeff = 1, speed_coeff = 1) {
	const
	sq = (x : number) => Math.pow(x, 2),
	[x, y] = get(state, pos) as vector,
	[sx, sy] = spot,
	dist = sq(x - sx) + sq(y - sy),
	ang = Math.abs(get(state, angle) as number),
	[hs, vs] = get(state, speed) as vector,

	bhs = Math.max(Math.abs(hs) - 20, 0),
	bvs = Math.max(Math.abs(vs) - 40, 0)
	
	return dist + angle_coeff * sq(ang) + speed_coeff * (sq(bhs) + sq(bvs))
}

function full_random(population : population, genotype_eval_function : Function, size : number, horizon : number) {
	while (population.length < size) {
		const genotype = []
		for (let j = 0; j < horizon / 2; j++)
			genotype.push( randint(-15, 15), randint(-1,1) )
		population.push(make_agent(genotype, genotype_eval_function))
	}
	return population
}

function kbest(population : population, k : number) {
	population.sort( (a, b) => a[1] - b[1] )
	population.length = Math.round(k)
	return population
}

function continuous2(a : agent, b : agent, genotype_eval_function : Function) {
	const
	g = a[0], h = b[0],
	n = g.length, split = Math.random()

	const new_genotype = [], new_genotype2 = []
	for (let i = 0; i < n; i++) {
		new_genotype.push( Math.round(split*g[i] + (1 - split)*h[i]) )
		new_genotype2.push( Math.round(split*h[i] + (1 - split)*g[i]) )
	}
	return [make_agent(new_genotype, genotype_eval_function), make_agent(new_genotype2, genotype_eval_function)]
}

function uniform_multiple(agent : agent, chance : number = 0.01) {
	const genotype = agent[0]
	for (let i = 0; i < genotype.length; i++)
		if (Math.random() <= chance)
			if (i % 2) genotype[i] = randint(-1, 1)
			else genotype[i] = randint(-15,15)
	return agent
}

function fspeed(state : state) {
	const [hs, vs] = get(state, speed) as vector

	return Math.abs(hs) + Math.abs(vs)
}

// Main

const
SURFACE = [0, 100, 1000, 500, 1500, 1500, 3000, 1000, 4000, 150, 5500, 150, 6999, 800],
SPOT = [4750, 150] as [number, number],
ORIGIN = [2500, 2700, 0, 0, 550, 0, 0] as state,
ENGINE = new Engine(SURFACE, SPOT, ORIGIN)


function standard_evaluator(fitf : Function) {
	return (genotype : genotype) => {
		let state : state
		for (let s of ENGINE.simulator(genotype))
			state = s

		if(ENGINE.succesful(state)) {console.error("SOLUTION", genotype, fitf(genotype, SPOT)); return -get(state, fuel)}
		return fitf(state, SPOT)
	}
}

function kamil() {
	const
	fitness = bounded_MSE,
	init = full_random,
	selection = kbest,
	crossover = continuous2,
	mutation = uniform_multiple,
	evaluator = standard_evaluator( (state : state, spot : [number, number]) => fitness(state,spot, 100, 100) ),
	POPULATION_SIZE = 500, HORIZON = 200


	/*----- main ----- */
	let POPULATION = init([], evaluator, POPULATION_SIZE, HORIZON)

	function next_generation() {
		POPULATION = selection(POPULATION, POPULATION_SIZE * 0.5)
		
		const generation = []
		for(let i = 1; i < POPULATION.length; i+=2) {
			const
			parent1 = POPULATION[i],
			parent2 = POPULATION[i-1]

			generation.push( ...crossover(parent1, parent2, evaluator) )
		}
		for (let i = 0; i < generation.length; i++) generation[i] = mutation(generation[i], 0.01)
		
		POPULATION = POPULATION.concat(generation)
	}


	return next_generation
}


const gen = kamil()
for(let i = 0; i < 50; i++)
    gen()


// -------------- CG -------------------
const
N: number = parseInt(readline()) // the number of points used to draw the surface of Mars.


for (let i = 0; i < N; i++) {
    var inputs: string[] = readline().split(' ');
    const landX: number = parseInt(inputs[0]); // X coordinate of a surface point. (0 to 6999)
    const landY: number = parseInt(inputs[1]); // Y coordinate of a surface point. By linking all the points together in a sequential fashion, you form the surface of Mars.

    if (landY == SURFACE[SURFACE.length - 1]) {
        SPOT[1] = landY
        SPOT[0] = (landX + SURFACE[SURFACE.length - 2]) / 2
    }

    //! SURFACE.push( landX, landY )
}

console.error(SPOT)



function read() {
    var inputs: string[] = readline().split(' ');
    const X: number = parseInt(inputs[0]);
    const Y: number = parseInt(inputs[1]);
    const HS: number = parseInt(inputs[2]); // the horizontal speed (in m/s), can be negative.
    const VS: number = parseInt(inputs[3]); // the vertical speed (in m/s), can be negative.
    const F: number = parseInt(inputs[4]); // the quantity of remaining fuel in liters.
    const R: number = parseInt(inputs[5]); // the rotation angle in degrees (-90 to 90).
    const P: number = parseInt(inputs[6]); // the thrust power (0 to 4).
    return [X, Y, HS, VS,F, R, P] as state
}






// game loop
let
LIVE_STATE : state = [2500, 2700, 0, 0, 550, -2, 0],
best : agent = [[], Infinity]


// setup


// model

// driver
// const gen = kamil()
// for(let i = 0; i < 50; i++) gen()

//console.error(best)

best = [
    [-1,0,-7,0,-7,1,-7,1,-2,0,4,0,-1,0,-3,1,-3,0,0,0,2,1,6,1,-5,0,4,0,4,0,0,0,-3,0,1,0,9,0,0,0,1,0,3,0,0,0,-3,0,1,0,-2,1,-3,0,3,0,-2,0,-3,0,6,-1,1,0,1,0,-6,0,2,0,0,1,-5,-1,5,0,2,0,-2,1,8,0,9,0,-6,1,-2,0,-3,-1,10,0,-5,0,3,0,4,0,-5,0,8,0,2,0,-3,0,-2,0,2,1,2,0,0,0,1,0,-5,0,-3,0,2,0,3,0,-5,0,-3,0,-1,0,6,0,-4,0,-1,0,-2,0,1,0,5,0,-3,0,4,1,-2,0,3,-1,-3,-1,1,0,-2,0,3,0,7,0,0,1,2,0,2,0,-1,0,-1,0,0,0,-2,1,0,0,-1,0,1,0,-1,0,2,0,-6,0,-1,1,5,1,-5,0,-3,0,-4,0,-5,-1,4,0],0
]

while (true) {

    // formalities
    if (LIVE_STATE.reduce( (a, b) => a + b) == 0) LIVE_STATE = read()
    else read()






    const
    A = best[0].shift(),
    B = best[0].shift()
    update(LIVE_STATE, A, B)
    let ang = get(LIVE_STATE, angle)

    //R P. R is the desired rotation angle. P is the desired thrust power.
    console.error(A, B)
    console.log( ang + " " + get(LIVE_STATE, thrust));
}
