#lang racket

; --------- ;
; Wyrazenia ;
; --------- ;

(struct const    (val)      #:transparent)
(struct binop    (op l r)   #:transparent)
(struct var-expr (id)       #:transparent)
(struct var-dead (id)       #:transparent)
(struct let-expr (id e1 e2) #:transparent)

(define (expr? e)
  (match e
    [(const n) (number? n)]
    [(binop op l r) (and (symbol? op) (expr? l) (expr? r))]
    [(var-expr x) (symbol? x)]
    [(var-dead x) (symbol? x)]
    [(let-expr x e1 e2) (and (symbol? x) (expr? e1) (expr? e2))]
    [_ false]))

(define (parse q)
  (cond
    [(number? q) (const q)]
    [(symbol? q) (var-expr q)]
    [(and (list? q) (eq? (length q) 3) (eq? (first q) 'let))
     (let-expr (first (second q))
               (parse (second (second q)))
               (parse (third q)))]
    [(and (list? q) (eq? (length q) 3) (symbol? (first q)))
     (binop (first q)
            (parse (second q))
            (parse (third q)))]))

; ---------------------------------- ;
; Wyszukaj ostatnie uzycie zmiennych ;
; ---------------------------------- ;

(define (annotate-expression e)
  (define (annot v env)
    (let ([val (member v env (lambda (x y) (eq? x (car y))))])
      (if val
          (var-bound (cdr (car val)) v)
          (var-free v))))
  
  (define (annot-rec e env)
    (match e
      [(const n)         (const n)]
      [(binop op l r)    (binop op (annot-rec l env) (annot-rec r env))]
      [(var-expr x)      (annot x env)]
      [(let-expr loc x e1 e2)
       (let-expr loc x
                 (annot-rec e1 env)
                 (annot-rec e2 (cons (cons x loc) env)))]
      [_ false]))
  
  (annot-rec e '()))

; mozesz tez oczywiscie dopisac tu jakies procedury